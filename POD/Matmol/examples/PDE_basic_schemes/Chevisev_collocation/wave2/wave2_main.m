%... The MatMol Group (2016)
%...
%... 2nd-order wave equation (solution using spectral methods)
%...
%... x   = x   
%...  tt    zz 
%...
%...
%... where
%...
%...  x       dependent variable
%...
%...  t       time
%...
%...  z       space
%...
%...
%... the boundary conditions (BCs) are taken as
%...
%... x(z=z0,t) = 0
%...
%... x(z=zL,t) = 0               
%...
%... where
%...
%...  [0,zL]    spatial domain
%...
%... the initial condition (IC) is taken as
%...
%... x(z,t=0) = exp(-200*z^2)
%...
%... the following code computes a solution to Burgers' equation
%...
     close all
     clear all
%...
%... start a stopwatch timer
     tic
%...
%... set global variables
     global z0 zL z n D1;
%...
%... spatial grid
     z0 = -1.0;
     zL = 1.0;
     n = 160;
%...
%... spectral differentiation
     [D1,z] = chebyshev_spectral_D1(z0,zL,n);
%...
%... possibly compared to classical FDs
%     dz = (zL-z0)/(n-1);
%     z = [z0:dz:zL]';
%     D1 = three_point_centered_uni_D1(z0,zL,n);
%...
%... initial conditions
     x = exp(-200*z.^2);    
%...  
%... call to ODE solver 
%...
%... leap_frog
     t0 = 0;
     tf = 4;
     Dt = 8/n^2; Dtplot=0.075;
     xm1 = exp(-200*(z-Dt).^2);    
     [tout, yout] = leap_frog_2_solver(@wave2_pde,t0,tf,x,xm1,Dt,Dtplot);
%...
     set(0,'defaultaxesfontsize',12,'defaultaxeslinewidth',.7,'defaultlinelinewidth',.8,'defaultpatchlinewidth',.7);
%...
     figure(1)
     plot(z,yout);
     xlabel('z');
     ylabel('x(t,z)');
%...
     figure(2)
     mesh(z,tout,yout);
     view(10,70);
     grid off;
     %colormap([0 0 0]);
     axis([z0 zL t0 tf -2 2]);
     xlabel('z');
     ylabel('t');
     zlabel('x(t,z)');
%...
%... read the stopwatch timer
     tcpu=toc;

  
